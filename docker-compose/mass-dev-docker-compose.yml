version: '3.8'

services:
  # Instance 1
  postgres1:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_1:-myuser1}
      POSTGRES_PASSWORD: ${DB_PASSWORD_1:-mypassword1}
      POSTGRES_DB: ${DB_NAME_1:-mydatabase1}
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - pgdata1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_1:-myuser1} -d ${DB_NAME_1:-mydatabase1}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator1:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres1:
        condition: service_healthy
    environment:
      DB_HOST: postgres1
      DB_PORT: 5432
      DB_USER: ${DB_USER_1:-myuser1}
      DB_PASSWORD: ${DB_PASSWORD_1:-mypassword1}
      DB_NAME: ${DB_NAME_1:-mydatabase1}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_1}
      PROVIDER_ID: ${PROVIDER_ID_1}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 2
  postgres2:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_2:-myuser2}
      POSTGRES_PASSWORD: ${DB_PASSWORD_2:-mypassword2}
      POSTGRES_DB: ${DB_NAME_2:-mydatabase2}
    ports:
      - "5433:5432"
    networks:
      - backend
    volumes:
      - pgdata2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_2:-myuser2} -d ${DB_NAME_2:-mydatabase2}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator2:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres2:
        condition: service_healthy
    environment:
      DB_HOST: postgres2
      DB_PORT: 5432
      DB_USER: ${DB_USER_2:-myuser2}
      DB_PASSWORD: ${DB_PASSWORD_2:-mypassword2}
      DB_NAME: ${DB_NAME_2:-mydatabase2}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_2}
      PROVIDER_ID: ${PROVIDER_ID_2}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 3
  postgres3:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_3:-myuser3}
      POSTGRES_PASSWORD: ${DB_PASSWORD_3:-mypassword3}
      POSTGRES_DB: ${DB_NAME_3:-mydatabase3}
    ports:
      - "5434:5432"
    networks:
      - backend
    volumes:
      - pgdata3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_3:-myuser3} -d ${DB_NAME_3:-mydatabase3}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator3:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres3:
        condition: service_healthy
    environment:
      DB_HOST: postgres3
      DB_PORT: 5432
      DB_USER: ${DB_USER_3:-myuser3}
      DB_PASSWORD: ${DB_PASSWORD_3:-mypassword3}
      DB_NAME: ${DB_NAME_3:-mydatabase3}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_3}
      PROVIDER_ID: ${PROVIDER_ID_3}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 4
  postgres4:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_4:-myuser4}
      POSTGRES_PASSWORD: ${DB_PASSWORD_4:-mypassword4}
      POSTGRES_DB: ${DB_NAME_4:-mydatabase4}
    ports:
      - "5435:5432"
    networks:
      - backend
    volumes:
      - pgdata4:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_4:-myuser4} -d ${DB_NAME_4:-mydatabase4}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator4:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres4:
        condition: service_healthy
    environment:
      DB_HOST: postgres4
      DB_PORT: 5432
      DB_USER: ${DB_USER_4:-myuser4}
      DB_PASSWORD: ${DB_PASSWORD_4:-mypassword4}
      DB_NAME: ${DB_NAME_4:-mydatabase4}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_4}
      PROVIDER_ID: ${PROVIDER_ID_4}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 5
  postgres5:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_5:-myuser5}
      POSTGRES_PASSWORD: ${DB_PASSWORD_5:-mypassword5}
      POSTGRES_DB: ${DB_NAME_5:-mydatabase5}
    ports:
      - "5436:5432"
    networks:
      - backend
    volumes:
      - pgdata5:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_5:-myuser5} -d ${DB_NAME_5:-mydatabase5}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator5:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres5:
        condition: service_healthy
    environment:
      DB_HOST: postgres5
      DB_PORT: 5432
      DB_USER: ${DB_USER_5:-myuser5}
      DB_PASSWORD: ${DB_PASSWORD_5:-mypassword5}
      DB_NAME: ${DB_NAME_5:-mydatabase5}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_5}
      PROVIDER_ID: ${PROVIDER_ID_5}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 6
  postgres6:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_6:-myuser6}
      POSTGRES_PASSWORD: ${DB_PASSWORD_6:-mypassword6}
      POSTGRES_DB: ${DB_NAME_6:-mydatabase6}
    ports:
      - "5437:5432"
    networks:
      - backend
    volumes:
      - pgdata6:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_6:-myuser6} -d ${DB_NAME_6:-mydatabase6}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator6:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres6:
        condition: service_healthy
    environment:
      DB_HOST: postgres6
      DB_PORT: 5432
      DB_USER: ${DB_USER_6:-myuser6}
      DB_PASSWORD: ${DB_PASSWORD_6:-mypassword6}
      DB_NAME: ${DB_NAME_6:-mydatabase6}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_6}
      PROVIDER_ID: ${PROVIDER_ID_6}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 7
  postgres7:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_7:-myuser7}
      POSTGRES_PASSWORD: ${DB_PASSWORD_7:-mypassword7}
      POSTGRES_DB: ${DB_NAME_7:-mydatabase7}
    ports:
      - "5438:5432"
    networks:
      - backend
    volumes:
      - pgdata7:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_7:-myuser7} -d ${DB_NAME_7:-mydatabase7}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator7:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres7:
        condition: service_healthy
    environment:
      DB_HOST: postgres7
      DB_PORT: 5432
      DB_USER: ${DB_USER_7:-myuser7}
      DB_PASSWORD: ${DB_PASSWORD_7:-mypassword7}
      DB_NAME: ${DB_NAME_7:-mydatabase7}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_7}
      PROVIDER_ID: ${PROVIDER_ID_7}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 8
  postgres8:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_8:-myuser8}
      POSTGRES_PASSWORD: ${DB_PASSWORD_8:-mypassword8}
      POSTGRES_DB: ${DB_NAME_8:-mydatabase8}
    ports:
      - "5439:5432"
    networks:
      - backend
    volumes:
      - pgdata8:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_8:-myuser8} -d ${DB_NAME_8:-mydatabase8}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator8:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres8:
        condition: service_healthy
    environment:
      DB_HOST: postgres8
      DB_PORT: 5432
      DB_USER: ${DB_USER_8:-myuser8}
      DB_PASSWORD: ${DB_PASSWORD_8:-mypassword8}
      DB_NAME: ${DB_NAME_8:-mydatabase8}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_8}
      PROVIDER_ID: ${PROVIDER_ID_8}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 9
  postgres9:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_9:-myuser9}
      POSTGRES_PASSWORD: ${DB_PASSWORD_9:-mypassword9}
      POSTGRES_DB: ${DB_NAME_9:-mydatabase9}
    ports:
      - "5440:5432"
    networks:
      - backend
    volumes:
      - pgdata9:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_9:-myuser9} -d ${DB_NAME_9:-mydatabase9}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator9:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres9:
        condition: service_healthy
    environment:
      DB_HOST: postgres9
      DB_PORT: 5432
      DB_USER: ${DB_USER_9:-myuser9}
      DB_PASSWORD: ${DB_PASSWORD_9:-mypassword9}
      DB_NAME: ${DB_NAME_9:-mydatabase9}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_9}
      PROVIDER_ID: ${PROVIDER_ID_9}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 10
  postgres10:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_10:-myuser10}
      POSTGRES_PASSWORD: ${DB_PASSWORD_10:-mypassword10}
      POSTGRES_DB: ${DB_NAME_10:-mydatabase10}
    ports:
      - "5441:5432"
    networks:
      - backend
    volumes:
      - pgdata10:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_10:-myuser10} -d ${DB_NAME_10:-mydatabase10}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator10:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres10:
        condition: service_healthy
    environment:
      DB_HOST: postgres10
      DB_PORT: 5432
      DB_USER: ${DB_USER_10:-myuser10}
      DB_PASSWORD: ${DB_PASSWORD_10:-mypassword10}
      DB_NAME: ${DB_NAME_10:-mydatabase10}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_10}
      PROVIDER_ID: ${PROVIDER_ID_10}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 11
  postgres11:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_11:-myuser11}
      POSTGRES_PASSWORD: ${DB_PASSWORD_11:-mypassword11}
      POSTGRES_DB: ${DB_NAME_11:-mydatabase11}
    ports:
      - "5442:5432"
    networks:
      - backend
    volumes:
      - pgdata11:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_11:-myuser11} -d ${DB_NAME_11:-mydatabase11}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator11:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres11:
        condition: service_healthy
    environment:
      DB_HOST: postgres11
      DB_PORT: 5432
      DB_USER: ${DB_USER_11:-myuser11}
      DB_PASSWORD: ${DB_PASSWORD_11:-mypassword11}
      DB_NAME: ${DB_NAME_11:-mydatabase11}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_11}
      PROVIDER_ID: ${PROVIDER_ID_11}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 12
  postgres12:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_12:-myuser12}
      POSTGRES_PASSWORD: ${DB_PASSWORD_12:-mypassword12}
      POSTGRES_DB: ${DB_NAME_12:-mydatabase12}
    ports:
      - "5443:5432"
    networks:
      - backend
    volumes:
      - pgdata12:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_12:-myuser12} -d ${DB_NAME_12:-mydatabase12}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator12:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres12:
        condition: service_healthy
    environment:
      DB_HOST: postgres12
      DB_PORT: 5432
      DB_USER: ${DB_USER_12:-myuser12}
      DB_PASSWORD: ${DB_PASSWORD_12:-mypassword12}
      DB_NAME: ${DB_NAME_12:-mydatabase12}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_12}
      PROVIDER_ID: ${PROVIDER_ID_12}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 13
  postgres13:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_13:-myuser13}
      POSTGRES_PASSWORD: ${DB_PASSWORD_13:-mypassword13}
      POSTGRES_DB: ${DB_NAME_13:-mydatabase13}
    ports:
      - "5444:5432"
    networks:
      - backend
    volumes:
      - pgdata13:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_13:-myuser13} -d ${DB_NAME_13:-mydatabase13}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator13:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres13:
        condition: service_healthy
    environment:
      DB_HOST: postgres13
      DB_PORT: 5432
      DB_USER: ${DB_USER_13:-myuser13}
      DB_PASSWORD: ${DB_PASSWORD_13:-mypassword13}
      DB_NAME: ${DB_NAME_13:-mydatabase13}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_13}
      PROVIDER_ID: ${PROVIDER_ID_13}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 14
  postgres14:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_14:-myuser14}
      POSTGRES_PASSWORD: ${DB_PASSWORD_14:-mypassword14}
      POSTGRES_DB: ${DB_NAME_14:-mydatabase14}
    ports:
      - "5445:5432"
    networks:
      - backend
    volumes:
      - pgdata14:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_14:-myuser14} -d ${DB_NAME_14:-mydatabase14}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator14:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres14:
        condition: service_healthy
    environment:
      DB_HOST: postgres14
      DB_PORT: 5432
      DB_USER: ${DB_USER_14:-myuser14}
      DB_PASSWORD: ${DB_PASSWORD_14:-mypassword14}
      DB_NAME: ${DB_NAME_14:-mydatabase14}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_14}
      PROVIDER_ID: ${PROVIDER_ID_14}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 15
  postgres15:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_15:-myuser15}
      POSTGRES_PASSWORD: ${DB_PASSWORD_15:-mypassword15}
      POSTGRES_DB: ${DB_NAME_15:-mydatabase15}
    ports:
      - "5446:5432"
    networks:
      - backend
    volumes:
      - pgdata15:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_15:-myuser15} -d ${DB_NAME_15:-mydatabase15}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator15:
    image: randao/orchestrator:v0.3.45
    depends_on:
      postgres15:
        condition: service_healthy
    environment:
      DB_HOST: postgres15
      DB_PORT: 5432
      DB_USER: ${DB_USER_15:-myuser15}
      DB_PASSWORD: ${DB_PASSWORD_15:-mypassword15}
      DB_NAME: ${DB_NAME_15:-mydatabase15}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_15}
      PROVIDER_ID: ${PROVIDER_ID_15}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Single DBeaver Instance
  dbeaver:
    image: dbeaver/cloudbeaver:23.2.0
    environment:
      CB_SERVER_SERVER_PORT: 8080
      CB_SERVER_ADMIN_NAME: "admin"
      CB_SERVER_ADMIN_PASSWORD: "admin123"
    networks:
      - backend
    ports:
      - "8080:8978"
    volumes:
      - dbeaver-data:/opt/cloudbeaver/workspace

  requester:
    image: randao/requester:v0.3.1
    environment:
      REQUEST_WALLET_JSON: ${REQUEST_WALLET_JSON}

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  pgdata1:
    driver: local
  pgdata2:
    driver: local
  pgdata3:
    driver: local
  pgdata4:
    driver: local
  pgdata5:
    driver: local
  pgdata6:
    driver: local
  pgdata7:
    driver: local
  pgdata8:
    driver: local
  pgdata9:
    driver: local
  pgdata10:
    driver: local
  pgdata11:
    driver: local
  pgdata12:
    driver: local
  pgdata13:
    driver: local
  pgdata14:
    driver: local
  pgdata15:
    driver: local
  dbeaver-data:
    driver: local

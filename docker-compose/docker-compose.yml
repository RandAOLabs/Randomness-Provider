services:
  postgres:
    image: postgres:13-alpine
    restart: unless-stopped  # Restart on crash (or on exit with non-zero code)
    environment:
      POSTGRES_USER: ${DB_USER:-myuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mypassword}
      POSTGRES_DB: ${DB_NAME:-mydatabase}
    ports:
      - "5431:5432"
    networks:
      - backend
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-myuser} -d ${DB_NAME:-mydatabase}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  orchestrator:
    image: randao/orchestrator:latest
    pull_policy: always  # Ensure the latest image is always pulled
    restart: unless-stopped  # Restart on crash (or on exit with non-zero code)
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-myuser}
      DB_PASSWORD: ${DB_PASSWORD:-mypassword}
      DB_NAME: ${DB_NAME:-mydatabase}
      SEED_PHRASE: ${SEED_PHRASE}
      WALLET_JSON: ${WALLET_JSON}
      DOCKER_NETWORK: backend
      NETWORK_IP: ${NETWORK_IP}
      NETWORK_MODE: ${NETWORK_MODE}
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/host-compose
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

networks:
  backend:
    name: backend
    driver: bridge

volumes:
  pgdata:
    driver: local

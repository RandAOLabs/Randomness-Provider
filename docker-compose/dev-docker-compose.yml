# version: '3.8'

services:
  # Instance 1
  postgres1:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_1:-myuser1}
      POSTGRES_PASSWORD: ${DB_PASSWORD_1:-mypassword1}
      POSTGRES_DB: ${DB_NAME_1:-mydatabase1}
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - pgdata1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_1:-myuser1} -d ${DB_NAME_1:-mydatabase1}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator1:
    image: randao/orchestrator:v0.4.2
    depends_on:
      postgres1:
        condition: service_healthy
    environment:
      DB_HOST: postgres1
      DB_PORT: 5432
      DB_USER: ${DB_USER_1:-myuser1}
      DB_PASSWORD: ${DB_PASSWORD_1:-mypassword1}
      DB_NAME: ${DB_NAME_1:-mydatabase1}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_1}
      PROVIDER_ID: ${PROVIDER_ID_1}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 2
  postgres2:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_2:-myuser2}
      POSTGRES_PASSWORD: ${DB_PASSWORD_2:-mypassword2}
      POSTGRES_DB: ${DB_NAME_2:-mydatabase2}
    ports:
      - "5433:5432"
    networks:
      - backend
    volumes:
      - pgdata2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_2:-myuser2} -d ${DB_NAME_2:-mydatabase2}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator2:
    image: randao/orchestrator:v0.4.2
    depends_on:
      postgres2:
        condition: service_healthy
    environment:
      DB_HOST: postgres2
      DB_PORT: 5432
      DB_USER: ${DB_USER_2:-myuser2}
      DB_PASSWORD: ${DB_PASSWORD_2:-mypassword2}
      DB_NAME: ${DB_NAME_2:-mydatabase2}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_2}
      PROVIDER_ID: ${PROVIDER_ID_2}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Instance 3
  postgres3:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER_3:-myuser3}
      POSTGRES_PASSWORD: ${DB_PASSWORD_3:-mypassword3}
      POSTGRES_DB: ${DB_NAME_3:-mydatabase3}
    ports:
      - "5434:5432"
    networks:
      - backend
    volumes:
      - pgdata3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER_3:-myuser3} -d ${DB_NAME_3:-mydatabase3}"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator3:
    image: randao/orchestrator:v0.4.2
    depends_on:
      postgres3:
        condition: service_healthy
    environment:
      DB_HOST: postgres3
      DB_PORT: 5432
      DB_USER: ${DB_USER_3:-myuser3}
      DB_PASSWORD: ${DB_PASSWORD_3:-mypassword3}
      DB_NAME: ${DB_NAME_3:-mydatabase3}
      ENVIRONMENT: local
      WALLET_JSON: ${WALLET_JSON_3}
      PROVIDER_ID: ${PROVIDER_ID_3}
      DOCKER_NETWORK: backend
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Single DBeaver Instance
  dbeaver:
    image: dbeaver/cloudbeaver:23.2.0
    environment:
      CB_SERVER_SERVER_PORT: 8080
      CB_SERVER_ADMIN_NAME: "admin"
      CB_SERVER_ADMIN_PASSWORD: "admin123"
    networks:
      - backend
    ports:
      - "8080:8978"
    volumes:
      - dbeaver-data:/opt/cloudbeaver/workspace

  requester:
    image: randao/requester:v0.2.8
    environment:
      REQUEST_WALLET_JSON: ${REQUEST_WALLET_JSON}


networks:
  backend:
    name: backend
    driver: bridge

volumes:
  pgdata1:
    driver: local
  pgdata2:
    driver: local
  pgdata3:
    driver: local
  dbeaver-data:
    driver: local
